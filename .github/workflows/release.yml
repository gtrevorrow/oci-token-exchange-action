name: Release

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      # Needs write access to create releases, read packages, and write for discussions (for notes)
      contents: 'write'
      packages: 'read'
      discussions: 'write'
      # Pull requests permission is used to comment on PRs mentioned in release notes
      pull-requests: 'write'
      # Issues permission is used to comment on issues being closed in the release
      issues: 'write'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main # Explicitly check out the main branch
          fetch-depth: 0 # Ensure full history is fetched

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build

      - name: Run Semantic Release
        id: semantic # Add an ID to reference the output
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Add steps to update major version tag
      - name: Get released version
        # Check if semantic-release step produced a new version
        if: steps.semantic.outputs.new_release_published == 'true' 
        run: |
          echo "RELEASE_VERSION=${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_ENV
          echo "New version released: ${{ steps.semantic.outputs.new_release_version }}"

      - name: Update Major Version Tag (e.g., v1)
        if: env.RELEASE_VERSION # Only run if a new version was released
        run: |
          # Extract the major version number (e.g., "1" from "v1.2.3")
          MAJOR_VERSION=$(echo $RELEASE_VERSION | sed -E 's/v([0-9]+)\..*/\1/')
          MAJOR_TAG="v$MAJOR_VERSION"
          echo "Updating tag $MAJOR_TAG to point to $RELEASE_VERSION"
          # Create or update the major version tag locally, pointing to the same commit as the release version tag
          git tag -f $MAJOR_TAG $RELEASE_VERSION 
          # Force push the major version tag to the remote
          git push --force origin $MAJOR_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        # Only run if a new version was released (RELEASE_VERSION is set)
        if: env.RELEASE_VERSION 
        run: |
          echo "Updating latest tag to point to $RELEASE_VERSION"
          # Create or update the latest tag locally, pointing it to the same commit as the release version tag
          git tag -f latest $RELEASE_VERSION 
          # Force push the latest tag to the remote
          git push --force origin latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
